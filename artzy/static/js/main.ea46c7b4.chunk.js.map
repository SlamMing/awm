{"version":3,"sources":["logo.svg","posts/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostsComponent","props","textAreaRef","React","createRef","useState","newPosts","setNewPosts","className","onSubmit","event","preventDefault","newVal","current","value","tempNewPosts","unshift","content","likes","id","ref","required","name","type","PostsList","postsInit","setPostsInit","posts","setPosts","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadPosts","map","item","index","Post","post","key","ActionButt","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","description","App","src","logo","alt","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","postsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea46c7b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\r\nimport {loadPosts} from '../lookup'\r\n\r\nexport function PostsComponent(props){\r\n  const textAreaRef = React.createRef()\r\n  const [newPosts, setNewPosts] = useState([])\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newVal = textAreaRef.current.value\r\n    let tempNewPosts = [...newPosts]\r\n    tempNewPosts.unshift({ //add it to the beginning of the list\r\n      content: newVal,\r\n      likes:0,\r\n      id:1132321\r\n    })\r\n    setNewPosts(tempNewPosts)\r\n    textAreaRef.current.value = ''\r\n  }\r\n  return <div className={props.className}>\r\n    <div className='col-12 mb-3'>\r\n    <form onSubmit={handleSubmit}>\r\n    <textarea ref={textAreaRef} required={true} className='form-control' name='post'></textarea>\r\n    <button type='submit' className='btn btn-primary my-3'>Publish</button>\r\n    </form>\r\n    </div>\r\n    <PostsList newPosts={newPosts} />\r\n    </div>\r\n}\r\nexport function PostsList(props){\r\n  const [postsInit, setPostsInit] = useState([])\r\n  const [posts, setPosts] = useState([])\r\n\r\n  useEffect(()=> {\r\n    const final = [...props.newPosts].concat(postsInit)\r\n    if (final.length !== posts.length){\r\n      setPosts(final)\r\n    }\r\n  }, [props.newPosts, posts, postsInit]) //dependencies\r\n  useEffect(()=> {\r\n    const myCallback = (response, status) => {\r\n      if (status === 200){\r\n\r\n            setPostsInit(response)\r\n      }\r\n    }\r\n    loadPosts(myCallback)\r\n  }, []) //dependencies\r\n  return posts.map((item, index)=>{\r\n    return <Post post={item} key={`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark' />\r\n  })\r\n\r\n}\r\n\r\n\r\nexport function ActionButt(props) {\r\nconst {post, action} = props\r\nconst [likes, setLikes] = useState(post.likes ? post.likes : 0)\r\nconst [userLike, setUserLike] = useState(post.userLike === true ? true : false)\r\nconst className = props.className ? props.className : 'btn btn-primary btn-sm'\r\nconst actionDisplay = action.display ? action.display : 'Action'\r\nconst display = action.type === 'like'  ? `${likes} ${actionDisplay}` : actionDisplay\r\nconst handleClick = (event) => {\r\n  event.preventDefault()\r\n  if (action.type === 'like'){\r\n    if(userLike === true){\r\n      console.log(likes)\r\n      setLikes(likes - 1)\r\n      setUserLike(false)\r\n    }else{\r\n      console.log(likes)\r\n      setLikes(likes + 1)\r\n      setUserLike(true)\r\n    }\r\n\r\n  }\r\n}\r\nreturn <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n\r\nexport function Post(props) {\r\nconst {post} = props\r\nconst className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\nreturn <div className={className}>\r\n<p> { post.description } </p>\r\n<div className='btn btn-group'>\r\n<ActionButt post={post} action={{type:\"like\", display:\"Likes\"}}/>\r\n<ActionButt post={post} action={{type:\"unlike\", display:\"Dislike\"}}/>\r\n<ActionButt post={post} action={{type:\"share\", display:\"Share\"}}/>\r\n</div>\r\n</div>\r\n}\r\n","\r\n\r\nexport function loadPosts(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://localhost:8000/api/posts\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function(){\r\n      callback(xhr.response, xhr.status)\r\n        }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"an error occured.\"}, 400)\r\n    }\r\n    xhr.send()\r\n    }\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {PostsComponent} from './posts'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <div>\n        <PostsComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {PostsComponent} from './posts'\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\nconst postsEl = document.getElementById(\"artzy\")\nif (postsEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <PostsComponent />\n    </React.StrictMode>,\n    postsEl\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}